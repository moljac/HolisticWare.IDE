<?xml version="1.0" encoding="UTF-8" ?>
<Template>
	<TemplateConfiguration>
		<_Name>iOS Table View Controller</_Name>
		<Icon>md-class-file</Icon>
		<_Category>iOS</_Category>
		<LanguageName>C#</LanguageName>
		<ProjectType>IPhone</ProjectType>
		<_Description>Custom set of classes for creating an iOS Table View Controller.</_Description>
	</TemplateConfiguration>
	
	<Conditions>
		<PartialTypeSupport Requirement="Enabled" />
		<MacProject IsAssetCatalog="False"/>
	</Conditions>
	
	<TemplateFiles>
		<File name="${Name}Controller.${LanguageExtension}">
<![CDATA[
using System;
using System.Drawing;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace ${Namespace}
{
	public class ${Name}Controller : UITableViewController
	{
		public ${Name}Controller () : base (UITableViewStyle.Grouped)
		{
		}
		
		public override void DidReceiveMemoryWarning ()
		{
			// Releases the view if it doesn't have a superview.
			base.DidReceiveMemoryWarning ();
			
			// Release any cached data, images, etc that aren't in use.
		}
		
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			
			// Register the TableView's data source
			TableView.Source = new ${Name}Source ();
		}
	}
}
]]>
		</File>
		<File name="${Name}Cell.${LanguageExtension}">
<![CDATA[
using System;
using System.Drawing;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace ${Namespace}
{
	public class ${Name}Cell : UITableViewCell
	{
		public static readonly NSString Key = new NSString ("${Name}Cell");
		
		public ${Name}Cell () : base (UITableViewCellStyle.Value1, Key)
		{
			// TODO: add subviews to the ContentView, set various colors, etc.
			TextLabel.Text = "TextLabel";
		}
	}
}
]]>
		</File>
		<File name="${Name}Source.${LanguageExtension}">
<![CDATA[
using System;
using System.Drawing;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace ${Namespace}
{
	public class ${Name}Source : UITableViewSource
	{
		public ${Name}Source ()
		{
		}
		
		public override int NumberOfSections (UITableView tableView)
		{
			// TODO: return the actual number of sections
			return 1;
		}
		
		public override int RowsInSection (UITableView tableview, int section)
		{
			// TODO: return the actual number of items in the section
			return 1;
		}
		
		public override string TitleForHeader (UITableView tableView, int section)
		{
			return "Header";
		}
		
		public override string TitleForFooter (UITableView tableView, int section)
		{
			return "Footer";
		}
		
		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell (${Name}Cell.Key) as ${Name}Cell;
			if (cell == null)
				cell = new ${Name}Cell ();
			
			// TODO: populate the cell with the appropriate data based on the indexPath
			cell.DetailTextLabel.Text = "DetailsTextLabel";
			
			return cell;
		}
	}
}
]]>
		</File>
	</TemplateFiles>
</Template>
